= RCAP - Common Alerting Protocol for Ruby

== Overview

The Common Alerting Protocol is a lightweight standard to facilitate the distribution of alerting data. RCAP is an implementation of the CAP in Ruby. It allows for the creation of RCAP messages from Ruby applications and the parsing of external messages.

RCAP supports CAP Version 1.1.

== Usage

=== Creating an Alert

 require 'rcap/rcap' # Requires RCAP API
 include CAP         # Include CAP module into namespace

 alert = Alert.new( :sender   => 'cape_town_disaster_relief@capetown.municipal.za',
                    :status   => Alert::STATUS_ACTUAL, 
                    :msg_type => Alert::MSG_TYPE_ALERT,
                    :scope    => Alert::SCOPE_PUBLIC,  
                    :infos    => Info.new( :event       => 'Liquid Petroleoum Tanker Fire',
                                           :language    => 'en-ZA',
                                           :categories  => [ Info::CATEGORY_TRANSPORT, Info::CATEGORY_FIRE ],
                                           :urgency     => Info::URGENCY_IMMEDIATE,
                                           :severity    => Info::SEVERITY_SEVERE,
                                           :certainty   => Info::CERTAINTY_OBSERVED,
                                           :headline    => 'LIQUID PETROLEOUM TANKER FIRE ON N2 INCOMING FREEWAY',
                                           :description => 'A liquid petroleoum tanker has caught fire on the N2 incoming freeway 1km after the R300 interchange.
                                                            Municipal fire fighting crews have been dispatched. Traffic control officers are on the scene and have
                                                            diverted traffic onto alternate routes.' ))

 puts alert.to_xml # Print out XML to standard output

Will print the following CAP XML:

  <?xml version='1.0'?>
  <alert xmlns='urn:oasis:names:tc:emergency:cap:1.1'>
    <identifier>494207a7-f86b-4060-8318-a4b2a3ce565e</identifier>
    <sender>cape_town_disaster_relief@capetown.municipal.za</sender>
    <sent>2009-10-26T21:04:51+2:00</sent>
    <status>Actual</status>
    <msgType>Alert</msgType>
    <scope>Public</scope>
    <info>
      <language>en-ZA</language>
      <category>Transport</category>
      <category>Fire</category>
      <event>Liquid Petroleoum Tanker Fire</event>
      <urgency>Immediate</urgency>
      <severity>Severe</severity>
      <certainty>Observed</certainty>
      <headline>LIQUID PETROLEOUM TANKER FIRE ON N2 INCOMING FREEWAY</headline>
      <description>
        A liquid petroleoum tanker has caught fire on the N2 incoming freeway 1km
        after the R300 interchange. Municipal fire fighting crews have been
        dispatched. Traffic control officers are on the scene and have diverted
        traffic onto alternate routes.
      </description>
    </info>
  </alert>

The 'identifier' and 'sent' sub-elements of the 'alert' element are auto generated by the API but can be set manually. 

You can also create the various message elements seperately and then combine them later:

 # Setting attributes at initialisation
 alert = Alert.new( :sender   => 'cape_town_disaster_relief@capetown.municipal.za',
                    :status   => Alert::STATUS_ACTUAL, 
                    :msg_type => Alert::MSG_TYPE_ALERT,
                    :scope    => Alert::SCOPE_PUBLIC )  
 
 # Setting attributes after initialisation
 info = Info.new 
 info.event      = 'Liquid Petroleoum Tanker Fire'
 info.language   = 'en-ZA'
 info.categories = [ Info::CATEGORY_TRANSPORT, Info::CATEGORY_FIRE ]
 info.urgency    = Info::URGENCY_IMMEDIATE
 info.severity   = Info::SEVERITY_SEVERE
 info.certainty  = Info::CERTAINTY_OBSERVED 


 resource  = Resource.new( :resource_desc => 'Cape Town Municipal Traffic Management Guidelines',
                           :uri           => 'http://capetown.municipal.za/traffic/management_guidelines.pdf',
                           :mime_type     => 'application/pdf')

 # Combining all elements
 info.resources << resource
 alert.infos << info

=== Validating an alert

The RCAP API aims to codify as many of the rules of the CAP format into validation rules that can be checked using the Assistance API (http://assistance.rubyforge.org). The following Info object has two attributes ('severity' and 'certainty') set to incorrect values.

 info = Info.new( :event      => 'Liquid Petroleoum Tanker Fire',
                  :language   => 'en-ZA',
                  :categories => [ Info::CATEGORY_TRANSPORT, Info::CATEGORY_FIRE ],
                  :urgency    => Info::URGENCY_IMMEDIATE,
                  :severity   => nil,                   # Severity is not assigned
                  :certainty  => 'Unknown Certainty' )  # Certainty is assigned in incorrect value
 puts info.valid?
 puts info.errors.full_messages

Will produce the folling output:

 false
 severity is not present
 certainty can only be assigned the following values: Observed, Likely, Possible, Unlikely, Unknown

A full spec suite using RSpec (http://www.rspec.info) was used to test the validations and currently numbers over 100 tests.
 
== Authors

Farrel Lifson - farrel.lifson@aimred.com

== License

RCAP is released under the BSD License.

== Copyright

2009 Aimred CC
